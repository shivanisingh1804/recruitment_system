
```markdown
# Recruitment Management System

## Overview

This project is a backend server for a Recruitment Management System. It allows users to create profiles, upload resumes, apply for jobs, and provides administrative functionalities for managing job postings and applicants.

## Features

- **User Registration**: Create profiles with email, password, and additional details.
- **Resume Upload**: Applicants can upload their resumes (PDF and DOCX formats).
- **Resume Parsing**: Uploaded resumes are processed using a third-party API to extract relevant information.
- **Job Management**: Admin users can create and view job openings.
- **Applicant Management**: Admin users can view uploaded resumes and extracted data.
- **Job Application**: Applicants can view job openings and apply for them.

## Requirements

- Go (1.22.2 or later)
- PostgreSQL
- [Golang JWT](https://github.com/dgrijalva/jwt-go)
- [Gorilla Mux](https://github.com/gorilla/mux)
- [Godotenv](https://github.com/joho/godotenv)
- [GORM](https://gorm.io/)

## Setup

1. **Clone the Repository**

   ```bash
   git clone <https://github.com/shivanisingh1804/recruitment_system>
   cd recruitment-system
   ```

2. **Install Dependencies**

   Run the following command to install the necessary Go modules:

   ```bash
   go mod tidy
   ```

3. **Setup Environment Variables**

   Create a `.env` file in the root directory with the following content (adjust as needed):

   ```
   DB_HOST=localhost
   DB_USER=postgres
   DB_PASSWORD=your_password
   DB_NAME=recruitment_system
   DB_PORT=5432
   ```

4. **Build the Application**

   Build the application binary:

   ```bash
   go build -o recruitment-system
   ```

## Running the Application

Start the application by running:

```bash
./recruitment-system
```

The server will start and listen on port `3000`.

## API Endpoints

### User Endpoints

- **POST /signup**
  - Create a new profile.
  - Request Body:
    ```json
    {
      "name": "John Doe",
      "email": "john.doe@example.com",
      "password": "password123",
      "user_type": "Applicant",
      "profile_headline": "Software Engineer",
      "address": "123 Main St"
    }
    ```

- **POST /login**
  - Authenticate a user and receive a JWT token.
  - Request Body:
    ```json
    {
      "email": "john.doe@example.com",
      "password": "password123"
    }
    ```

### Resume Endpoints

- **POST /uploadResume**
  - Upload a resume (PDF or DOCX format). Only accessible by `Applicant` users.
  - Headers:
    ```
    Authorization: Bearer <token>
    ```
  - Form Data: `resume`

### Admin Endpoints

- **POST /admin/job**
  - Create a new job opening. Only accessible by `Admin` users.
  - Request Body:
    ```json
    {
      "title": "Software Developer",
      "description": "Develop and maintain software",
      "posted_on": "2024-07-21T00:00:00Z",
      "total_applications": 0,
      "company_name": "Tech Inc"
    }
    ```

- **GET /admin/job/{job_id}**
  - Get job details and applicants. Only accessible by `Admin` users.

- **GET /admin/applicants**
  - Get a list of all applicants. Only accessible by `Admin` users.

- **GET /admin/applicant/{applicant_id}**
  - Get details of a specific applicant. Only accessible by `Admin` users.

### Job Endpoints

- **GET /jobs**
  - Get a list of job openings. Accessible to all users.

- **GET /jobs/apply?job_id={job_id}**
  - Apply for a specific job. Only accessible by `Applicant` users.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgements

- [Golang](https://golang.org/)
- [PostgreSQL](https://www.postgresql.org/)
- [JWT](https://jwt.io/)
- [GORM](https://gorm.io/)
- [Gorilla Mux](https://github.com/gorilla/mux)
- [Godotenv](https://github.com/joho/godotenv)
```

Feel free to modify the content based on specific needs or any additional information you might want to include.

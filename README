# Sure, here is a detailed `README.md` file for the Recruitment Management System project:

# ```markdown
# # Recruitment Management System

# This is a Recruitment Management System built using Go and Gin framework. It allows users to create profiles, upload resumes, view and apply for job openings. Admin users can create job openings and view all uploaded resumes and extracted data of applicants.

# ## Project Structure

# ```
# recruitment_system/
# ├── controllers/
# │   ├── auth.go
# │   ├── job.go
# │   ├── profile.go
# │   ├── user.go
# ├── models/
# │   ├── job.go
# │   ├── profile.go
# │   ├── user.go
# ├── services/
# │   ├── auth.go
# │   ├── resume_parser.go
# ├── middlewares/
# │   ├── auth.go
# ├── config/
# │   ├── config.go
# ├── routes/
# │   ├── routes.go
# ├── .env
# ├── go.mod
# ├── go.sum
# ├── main.go
# └── README.md
# ```

# ## Requirements

# - Go 1.20 or later
# - PostgreSQL


# ## Setup

# 1. Clone the repository:
#    ```sh
#    git clone https://github.com/yourusername/recruitment_system.git
#    cd recruitment_system
#    ```

# 2. Initialize Go modules:
#    ```sh
#    go mod init recruitment_system
#    go mod tidy
#    ```

# 3. Create a `.env` file with the following content:
#    ```env
#    DB_PATH=recruitment_system.db
#    JWT_SECRET=your_jwt_secret
#    API_KEY=gNiXyflsFu3WNYCz1ZCxdWDb7oQg1Nl1
#    ```

# 4. Run the application:
#    ```sh
#    go run main.go
#    ```

# The application will run on port 3000.

# ## API Endpoints

# ### Authentication

# - **POST /signup**: Create a profile on the system.
#   - Request Body:
#     ```json
#     {
#       "name": "John Doe",
#       "email": "john.doe@example.com",
#       "password": "password",
#       "user_type": "Applicant",
#       "profile_headline": "Software Engineer",
#       "address": "123 Main St"
#     }
#     ```
# - **POST /login**: Authenticate users and return a JWT token.
#   - Request Body:
#     ```json
#     {
#       "email": "john.doe@example.com",
#       "password": "password"
#     }
#     ```

# ### Applicant

# - **POST /uploadResume**: Upload resume files (only PDF or DOCX). Only Applicant users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```
#   - Request Form-Data:
#     - `file`: The resume file.

# - **GET /jobs**: Fetch job openings. All users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```

# - **GET /jobs/apply?job_id={job_id}**: Apply to a particular job. Only Applicant users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```

# ### Admin

# - **POST /admin/job**: Create job openings. Only Admin users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```
#   - Request Body:
#     ```json
#     {
#       "title": "Software Engineer",
#       "description": "Job description here",
#       "company_name": "Company XYZ"
#     }
#     ```

# - **GET /admin/job/{job_id}**: Fetch information about a job opening. Returns details about the job opening and a list of applicants. Only Admin users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```

# - **GET /admin/applicants**: Fetch a list of all users in the system. Only Admin users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```

# - **GET /admin/applicant/{applicant_id}**: Fetch extracted data of an applicant. Only Admin users can access this API.
#   - Request Header:
#     ```json
#     {
#       "Authorization": "Bearer <JWT_TOKEN>"
#     }
#     ```

# ## Models

# ### User

# - `Name`: string
# - `Email`: string
# - `Address`: string
# - `UserType`: string (Applicant/Admin)
# - `PasswordHash`: string
# - `ProfileHeadline`: string
# - `Profile`: Profile

# ### Profile

# - `Applicant`: User
# - `ResumeFileAddress`: string
# - `Skills`: string
# - `Education`: string
# - `Experience`: string
# - `Name`: string
# - `Email`: string
# - `Phone`: string

# ### Job

# - `Title`: string
# - `Description`: string
# - `PostedOn`: datetime
# - `TotalApplications`: int
# - `CompanyName`: string
# - `PostedBy`: User

# ## Resume Parsing

# - The system uses a third-party API to extract details from resumes.
# - API Endpoint: `https://api.apilayer.com/resume_parser/upload`
# - Request Type: `POST`
# - Headers:
#   - `Content-Type`: `application/octet-stream`
#   - `apikey`: `gNiXyflsFu3WNYCz1ZCxdWDb7oQg1Nl1`
# - Example CURL Command:
#   ```sh
#   curl --location --request POST 'https://api.apilayer.com/resume_parser/upload' \
#   --header 'Content-Type: application/octet-stream' \
#   --header 'apikey: YOUR API KEY HERE' \
#   --data-binary '@/C:/Users/test/Desktop/sample_resume.docx'
#   ```
Here’s a `README.md` file template for your Recruitment Management System project. You can copy and paste this into a `README.md` file in your project directory. This template includes instructions for setup, running the application, and using the APIs.

```markdown
# Recruitment Management System

## Overview

This project is a backend server for a Recruitment Management System. It allows users to create profiles, upload resumes, apply for jobs, and provides administrative functionalities for managing job postings and applicants.

## Features

- **User Registration**: Create profiles with email, password, and additional details.
- **Resume Upload**: Applicants can upload their resumes (PDF and DOCX formats).
- **Resume Parsing**: Uploaded resumes are processed using a third-party API to extract relevant information.
- **Job Management**: Admin users can create and view job openings.
- **Applicant Management**: Admin users can view uploaded resumes and extracted data.
- **Job Application**: Applicants can view job openings and apply for them.

## Requirements

- Go (1.22.2 or later)
- PostgreSQL
- [Golang JWT](https://github.com/dgrijalva/jwt-go)
- [Gorilla Mux](https://github.com/gorilla/mux)
- [Godotenv](https://github.com/joho/godotenv)
- [GORM](https://gorm.io/)

## Setup

1. **Clone the Repository**

   ```bash
   git clone <repository_url>
   cd recruitment-system
   ```

2. **Install Dependencies**

   Run the following command to install the necessary Go modules:

   ```bash
   go mod tidy
   ```

3. **Setup Environment Variables**

   Create a `.env` file in the root directory with the following content (adjust as needed):

   ```
   DB_HOST=localhost
   DB_USER=postgres
   DB_PASSWORD=your_password
   DB_NAME=recruitment_system
   DB_PORT=5432
   ```

4. **Build the Application**

   Build the application binary:

   ```bash
   go build -o recruitment-system
   ```

## Running the Application

Start the application by running:

```bash
./recruitment-system
```

The server will start and listen on port `3000`.

## API Endpoints

### User Endpoints

- **POST /signup**
  - Create a new profile.
  - Request Body:
    ```json
    {
      "name": "John Doe",
      "email": "john.doe@example.com",
      "password": "password123",
      "user_type": "Applicant",
      "profile_headline": "Software Engineer",
      "address": "123 Main St"
    }
    ```

- **POST /login**
  - Authenticate a user and receive a JWT token.
  - Request Body:
    ```json
    {
      "email": "john.doe@example.com",
      "password": "password123"
    }
    ```

### Resume Endpoints

- **POST /uploadResume**
  - Upload a resume (PDF or DOCX format). Only accessible by `Applicant` users.
  - Headers:
    ```
    Authorization: Bearer <token>
    ```
  - Form Data: `resume`

### Admin Endpoints

- **POST /admin/job**
  - Create a new job opening. Only accessible by `Admin` users.
  - Request Body:
    ```json
    {
      "title": "Software Developer",
      "description": "Develop and maintain software",
      "posted_on": "2024-07-21T00:00:00Z",
      "total_applications": 0,
      "company_name": "Tech Inc"
    }
    ```

- **GET /admin/job/{job_id}**
  - Get job details and applicants. Only accessible by `Admin` users.

- **GET /admin/applicants**
  - Get a list of all applicants. Only accessible by `Admin` users.

- **GET /admin/applicant/{applicant_id}**
  - Get details of a specific applicant. Only accessible by `Admin` users.

### Job Endpoints

- **GET /jobs**
  - Get a list of job openings. Accessible to all users.

- **GET /jobs/apply?job_id={job_id}**
  - Apply for a specific job. Only accessible by `Applicant` users.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgements

- [Golang](https://golang.org/)
- [PostgreSQL](https://www.postgresql.org/)
- [JWT](https://jwt.io/)
- [GORM](https://gorm.io/)
- [Gorilla Mux](https://github.com/gorilla/mux)
- [Godotenv](https://github.com/joho/godotenv)
```

Feel free to modify the content based on specific needs or any additional information you might want to include.